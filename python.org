#+title: Python IP Class Notebook
#+author: Nebhrajani A. V.
#+date:
#+LATEX_HEADER: \usemintedstyle{emacs}
\newpage

* Preamble
** Notebook Conventions
   All code in this notebook is in Python unless specified otherwise.
   All code is syntax-highlighted, placed in boxes, and is line
   numbered. The output of the interpreter on =stdout= is printed directly below it,
   =verbatim=, thus.
#+ATTR_LATEX: :options frame=single, framesep=10pt, linenos
#+BEGIN_SRC python :results output :exports both
  # Print Hello world!
  print("Hello world!")
#+END_SRC
It is recommended that you navigate using the hyperlinked TOC or the Adobe
Bookmarks tree.

** Hardware and Software Used

   This notebook is written in an =org-mode= file and exported via LaTeX, Org version 9.3.6 on
  GNU Emacs 25.2.2 (x86_ 64-pc-linux-gnu, GTK+ Version 3.22.21) of
  2017-09-23, modified by Debian, on a Foxconn Core i7 NanoPC running Linux
  Mint 19.3 XFCE 64-bit. Python 2.7.17 of 2020-04-15 is used
  throughout unless specified otherwise. For the Org or LaTeX source, contact
  \href{mailto:aditya.v.nebhrajani@gmail.com}{aditya.v.nebhrajani@gmail.com}.

** Acknowledgements
   I am grateful to the FSF, the GNU Project, the Linux foundation,
   the Emacs, StackExchange and FLOSS communities, and my father,
   who taught me that a world outside commercialized technology does
   exist and thrive.
\newpage

* NumPy
** Worksheet 2020-07-26

   1. Create an ndarray with values ranging from 10 to 49 each spaced with a difference of 3.
       #+ATTR_LATEX: :options frame=single, framesep=10pt, linenos
        #+BEGIN_SRC python :results output :exports both
         import numpy as np
         arr=np.arange(10,50,3,dtype=int)
         print(arr)
       #+END_SRC

   2. Find the output of the following Python code:

      #+ATTR_LATEX: :options frame=single, framesep=10pt, linenos
      #+BEGIN_SRC python :results output :exports both
        x="hello world"
        print(x[:2],x[:-2],x[-2:])
      #+END_SRC

   3. Predict the output of the following code fragments:

      #+ATTR_LATEX: :options frame=single, framesep=10pt, linenos
      #+BEGIN_SRC python :results output :exports both
        import numpy as np
        x=np.array([1,2,3])
        y=np.array([3,2,1])
        z=np.concatenate([x,y])
        print(z)
      #+END_SRC

   4. Consider following two arrays: Array1=
      array([0,1,2],[3,4,5],[6,7,8]]) and Array2=
      array([10,11,12],[13,14,15],[16,17,18]]). Write NumPy command to concatenate Array1 and Array2:

      a) Row wise
          #+ATTR_LATEX: :options frame=single, framesep=10pt, linenos
           #+BEGIN_SRC python :results output :exports both
            import numpy as np
            Array1= np.array([[0,1,2],[3,4,5],[6,7,8]])
            Array2= np.array([[10,11,12],[13,14,15],[16,17,18]])
            rarr=np.concatenate([Array1,Array2],axis=1)
            print(rarr)
          #+END_SRC
      b) Column wise
          #+ATTR_LATEX: :options frame=single, framesep=10pt, linenos
           #+BEGIN_SRC python :results output :exports both
            import numpy as np
            Array1= np.array([[0,1,2],[3,4,5],[6,7,8]])
            Array2= np.array([[10,11,12],[13,14,15],[16,17,18]])
            carr=np.concatenate([Array1,Array2],axis=0)
            print(carr)
          #+END_SRC

   5. To create sequences of numbers, NumPy provides a function _(a)arange_ analogous to range that returns arrays instead of lists.

   6. Find the output of following program.
     #+ATTR_LATEX: :options frame=single, framesep=10pt, linenos
     #+BEGIN_SRC python :results output :exports both
       import numpy as np
       a=np.array([30,60,70,30,10,86,45])
       print(a[-2:6])
    #+END_SRC

   7. Write a NumPy program to create a 2d array with 1 on the border and 0 inside.
     #+ATTR_LATEX: :options frame=single, framesep=10pt, linenos
     #+BEGIN_SRC python :results output :exports both
       import numpy as np
       x = np.ones((5,5))
       print("Original array:")
       print(x)
       print("1 on the border and 0 inside in the array")
       x[1:-1,1:-1] = 0
       print(x)
     #+END_SRC

   8. Given following ndarray A: ([[2, 4, 6], [7, 8, 9], [1, 2, 3]])
      Write the python statements to perform the array slices in the
      way so as to extract first row and second column.
          #+ATTR_LATEX: :options frame=single, framesep=10pt, linenos
           #+BEGIN_SRC python :results output :exports both
            import numpy as np
            A = np.array([[2,4,6],[7,8,9],[1,2,3]])
            print(A[0,:])
            print(A[:,1])
          #+END_SRC

   9. Write python statement to create a two- dimensional array of 4 rows and 3 columns. The array should be filled with ones.
     #+ATTR_LATEX: :options frame=single, framesep=10pt, linenos
     #+BEGIN_SRC python :results output :exports both
       import numpy as np
       x = np.ones((4,3))
       print(x)
     #+END_SRC

   10. Find the output of following program.
        #+ATTR_LATEX: :options frame=single, framesep=10pt, linenos
         #+BEGIN_SRC python :results output :exports both
          import numpy as np
          d = np.array([10,20,30,40,50,60,70])
          print(d[-5:])
        #+END_SRC

   11. State at least two differences between a NumPy array and a list
       #+attr_latex: :align |l|l|
       |------------------------------------------+------------------------------------------------|
       | NumPy Array                              | List                                           |
       |------------------------------------------+------------------------------------------------|
       | By default, numpy arrays are homogeneous | They can have elements of different data types |
       | Element-wise operations are possible     | Element-wise operations don’t work on lists    |
       | They take up less space                  | They take up more space                        |
       |------------------------------------------+------------------------------------------------|

   12. Find the output of following program.
        #+ATTR_LATEX: :options frame=single, framesep=10pt, linenos
         #+BEGIN_SRC python :results output :exports both
          import numpy as np
          d=np.array([10,20,30,40,50,60,70])
          print(d[-1:-4:-1])
        #+END_SRC

   13. Write the output of the following code.
        #+ATTR_LATEX: :options frame=single, framesep=10pt, linenos
         #+BEGIN_SRC python :results output :exports both
          import numpy as np
          a=[[1,2,3,4],[5,6,7,8]]
          b=[[1,2,3,4],[5,6,7,8]]
          n=np.concatenate((a, b), axis=0)
          print(n[1])
          print(n[1][1])
        #+END_SRC

   14. Which of the following is contained in NumPy library?
       a) *N-Dimensional Array Object*
       b) Series
       c) DataFrame
       d) Plot

   15. Point out the correct statement:
       a) NumPy main object is the homogeneous multidimensional array
       b) In Numpy, dimensions are called axes
       c) NumPy array class is called ndarray
       d) *All of the above*

   16. When the fromiter() is preferred over array()?
       *A:* Fromiter() is preferred over array()for creating non-numeric
       sequences like strings and dictionaries.

   17. What is the purpose of order argument in empty(). What do ‘C’
       and ‘F’ stands for? What is the default value of order
       argument?
       *A:* The “order” argument arranges the elements of the
       array row-wise or column-wise. C order arranges elements column
       wise and means “c”-like, whereas F order arranges elements row
       wise and means “fortran”-like. Default value of order argument
       is C.

   18. Differentiate split() from hsplit() and vsplit().
       *A:* Split() function is a general function which can be used to split an
       array in numpy both horizontally and vertically by providing an
       axis. If the axis is 0 it is the same as hsplit() and if the
       axis is 1 it behaves as vsplit(). The difference between
       split() and hsplit(),vsplit() is that split() allows you to
       specify the axis that you wish, and hsplit() and vsplit() are
       for specific axes.

   19. Find the output:
       a)
            #+ATTR_LATEX: :options frame=single, framesep=10pt, linenos
             #+BEGIN_SRC python :results output :exports both
              import numpy as np
              a = np.linspace(2.5,5,6)
              print(a)
            #+END_SRC

       b)
           #+ATTR_LATEX: :options frame=single, framesep=10pt, linenos
            #+BEGIN_SRC python :results output :exports both
             import numpy as np
             a=np.array([[0,2,4,6],[8,10,12,14],[16,18,20,22],[24,26,28,30]])
             print(a)
             print(a[:3,3:])
             print(a[1::2,:3])
             print(a[-3:-1,-4::2])
             print(a[::-1,::-1])
           #+END_SRC

* Pandas
** Series

#+ATTR_LATEX: :options frame=single, framesep=10pt, linenos
#+BEGIN_SRC python :results output :exports both
  # Import numpy and pandas
  import pandas as pd
  import numpy as np

  # Create an empty series
  s = pd.Series()
  print(s)

  # Series from ndarray
  data = np.array(['a', 'b', 'c', 'd'])

  ## Without index
  s = pd.Series(data)
  print(s)
  ## With index
  s = pd.Series(data, index = [100, 101, 102, 103])
  print(s)

  # Scalar series
  s = pd.Series(5, index = [0, 1, 2, 3])
  print(s)

  # Series from dictionary
  data = {'a' : 0., 'b' : 1., 'c' : 2.}

  ## Without index
  s = pd.Series(data)
  print(s)
  ## With index
  s = pd.Series(data, index = ['b', 'c', 'd', 'a'])
  print(s)

  # Another dictionary example
  f_dict = {'apples': 500, 'kiwi': 20, 'oranges': 100, 'cherries': 6000}
  print(f_dict)

  arr = pd.Series(f_dict)
  print('\nArray Items')
  print(arr)
#+END_SRC

 #+ATTR_LATEX: :options frame=single, framesep=10pt, linenos
 #+BEGIN_SRC python :results output :exports both
   # Indexing
   import pandas as pd
   from pandas import Series
   arr = Series([22, 44, 66, 88, 108])
   print(arr[[1, 3, 0, 4]])
 #+END_SRC

 #+ATTR_LATEX: :options frame=single, framesep=10pt, linenos
 #+BEGIN_SRC python :results output :exports both
   # Series operations
   import pandas as pd
   ds1 = pd.Series([2, 4, 6, 8, 10])
   ds2 = pd.Series([1, 3, 5, 7, 9])
   print(ds1)
   print(ds2)
   ds = ds1 + ds2
   print("Add two Series:")
   print(ds)
   print("Subtract two Series:")
   ds = ds1 - ds2
   print(ds)
   print("Multiply two Series:")
   ds = ds1 * ds2
   print(ds)
   print("Divide Series1 by Series2:")
   ds = ds1 / ds2
   print(ds)
 #+END_SRC
